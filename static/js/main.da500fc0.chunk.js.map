{"version":3,"sources":["components/navigation.js","components/item.js","components/EmptyScreen.js","components/todo.js","components/done.js","components/Notification.js","components/FormTodo.js","components/App.js","index.js"],"names":["Navigation","Item","props","icon","info","text","status","_id","className","onClick","callYourParent","EmptyScreen","src","alt","ToDo","data","onUpdateItem","id","callGrandpa","toDoList","map","el","key","length","Done","callGrandma","donesList","Notification","setTimeout","hideNotification","ToDoForm","handleSubmit","e","preventDefault","newTodo","uuidv4","state","todo","date","Date","addTodo","handleChange","setState","target","value","onSubmit","this","placeholder","onChange","React","Component","App","updateTodos","item","newItems","items","fetch","method","headers","body","JSON","stringify","then","res","json","todoUpdated","console","log","updateFam","showNotification","handleNotification","handleNewTodo","API_URL","process","REACT_APP_URL","catch","error","todoData","toDos","filter","dones","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAaeA,G,MAXI,WACf,OACI,gCACI,2CCiBGC,EApBF,SAACC,GAAW,IAEjBC,EAFgB,EACUD,EAAME,KAA5BC,EADY,EACZA,KAAMC,EADM,EACNA,OAAQC,EADF,EACEA,IAGXJ,EAARG,EAAe,wCACN,wCAMZ,OACI,yBAAKE,UAAWF,EAAS,aAAe,YACxC,2BAAID,GACJ,4BAAQG,UAAU,MAAMC,QAPX,WACbP,EAAMQ,eAAeH,KAMuBJ,KCJrCQ,EAVK,SAACT,GACnB,OACE,oCACE,yBAAKM,UAAU,SACb,yBAAKI,IAAI,6DAA6DC,IAAI,QCkBnEC,EApBF,SAACZ,GAAW,IACfa,EAASb,EAATa,KAEAC,EAAe,SAACC,GAClBf,EAAMgB,YAAYD,IAIlBE,EAAWJ,EAAKK,KAAI,SAACC,GACrB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGd,IAAKH,KAAMiB,EAAIX,eAAgBM,OAGxD,OACI,yBAAKR,UAAU,QACX,qCACCO,EAAKQ,OAAS,EAAIJ,EAAW,kBAAC,EAAD,QCK3BK,EAnBF,SAACtB,GAAW,IACfa,EAASb,EAATa,KAEAC,EAAe,SAACC,GACpBf,EAAMuB,YAAYR,IAGlBS,EAAYX,EAAKK,KAAI,SAACC,GACxB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGd,IAAKH,KAAMiB,EAAIX,eAAgBM,OAGpD,OACI,yBAAKR,UAAU,QACX,oCACCO,EAAKQ,OAAS,EAAIG,EAAY,kBAAC,EAAD,QCF5BC,EAfM,SAACzB,GAKpB,OAJA0B,YAAW,WACT1B,EAAM2B,qBACL,KAGD,oCACE,yBAAKrB,UAAU,gBACb,yBAAKI,IAAI,wDAAwDC,IAAI,KACrE,qD,OCkCOiB,E,kDAzCX,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IAKR6B,aAAe,SAACC,GACZA,EAAEC,iBAGF,IAAIC,EAAU,CACZ5B,QAAQ,EACRC,IAAK4B,eACL9B,KAAM,EAAK+B,MAAMC,KACjBC,KAAM,IAAIC,MAOZ,EAAKrC,MAAMsC,QAAQN,IArBJ,EAwBjBO,aAAe,SAACT,GACd,EAAKU,SAAS,CAAEL,KAAML,EAAEW,OAAOC,SAvBjC,EAAKR,MAAQ,CAAEC,KAAM,IAFJ,E,qDA+Bf,OACI,0BAAMQ,SAAUC,KAAKf,cACjB,2BAAOgB,YAAY,kBAAkBC,SAAUF,KAAKL,eACpD,4C,GAnCOQ,IAAMC,WC2JdC,E,kDAnJb,WAAYjD,GAAQ,IAAD,8BACjB,cAAMA,IA6CRkD,YAAc,SAACnC,GACb,IAAIoC,EAGEC,EAAW,EAAKlB,MAAMmB,MAAMnC,KAAI,SAACC,GAKrC,OAJIA,EAAGd,MAAQU,IACbI,EAAGf,QAAUe,EAAGf,OAChB+C,EAAOhC,GAEFA,KAKTmC,MAAM,oCAAD,OAAqCH,EAAK9C,KAAO,CACpDkD,OAAQ,MAERC,QAAS,CAAE,eAAgB,oBAE3BC,KAAMC,KAAKC,UAAW,CACpBvD,OAAQ+C,EAAK/C,WAGhBwD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GAEZ,EAAKvB,SAAS,CACZa,MAAOD,QA1EM,EA6FjBc,UAAY,SAACnD,GACX,IAAMqC,EAAW,EAAKlB,MAAMmB,MAAMnC,KAAI,SAACC,GAErC,OADIA,EAAGd,MAAQU,IAAII,EAAGf,QAAUe,EAAGf,QAC5Be,KAGT,EAAKqB,SAAS,CACZa,MAAOD,EACPe,kBAAkB,KArGL,EA0GjBC,mBAAqB,WACjB,EAAK5B,SAAS,CACZ2B,kBAAkB,KA5GP,EAgHjBE,cAAgB,SAAClC,GAEf,IAAImC,EAAUC,yKAAYC,cAC1BlB,MAAMgB,GACLV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA5B,GACJ,IAAIoB,EAAQ,sBAAO,EAAKlB,MAAMmB,OAAlB,CAAyBrB,IACrC,EAAKQ,SAAS,CAACa,MAAOD,OAEvBqB,OAAM,SAAAC,GACLV,QAAQC,IAAIS,OAvHhB,EAAKxC,MAAQ,CACXmB,MAAM,GAsCNc,kBAAkB,GA1CH,E,gEAkFE,IAAD,OAElBb,MAAM,oCACLM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAe,GACJX,QAAQC,IAAIU,GACZ,EAAKnC,SAAS,CAACa,MAAOsB,S,+BAwCxB,IAAItB,EAAQT,KAAKV,MAAMmB,MACnBuB,EAAQvB,EAAMwB,QAAO,SAAC1D,GAAD,OAAsB,IAAdA,EAAGf,UAChC0E,EAAQzB,EAAMwB,QAAO,SAAC1D,GAAD,OAAsB,IAAdA,EAAGf,UAChC+D,EAAmBvB,KAAKV,MAAMiC,iBAGtC,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,MACC6D,GAAoB,kBAAC,EAAD,CAAcxC,iBAAkBiB,KAAKwB,qBAC1D,kBAAC,EAAD,CAAU9B,QAASM,KAAKyB,gBACxB,kBAAC,EAAD,CAAMxD,KAAM+D,EAAO5D,YAAa4B,KAAKsB,YACrC,kBAAC,EAAD,CAAMrD,KAAMiE,EAAOvD,YAAaqB,KAAKsB,iB,GA7IvBnB,IAAMC,WCLxB+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.da500fc0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = () => {\n    return (\n        <header>\n            <h1>TODO APP</h1>\n        </header>\n    );\n};\n\n\n\n\nexport default Navigation;\n","import React from 'react';\n\nconst Item = (props) => {\n    const { text, status, _id } = props.info;\n    let icon;\n    \n    if(status) icon = <span>&#10003;</span>\n    else icon = <span>&#10061;</span>\n\n    const callPapa = () => {\n        props.callYourParent(_id);\n      };\n\n    return(\n        <div className={status ? 'toDoneItem' : 'toDoItem'}>\n        <p>{text}</p>\n        <button className=\"btn\" onClick={callPapa}>{icon}</button>\n        </div>\n    )\n}\n\n\nexport default Item;\n","import React from 'react';\n\nconst EmptyScreen = (props) => {\n  return (\n    <>\n      <div className=\"empty\">\n        <img src=\"https://media.giphy.com/media/WTM0nLKlzhWTE3QwJz/giphy.gif\" alt=\"\"></img>\n      </div>\n    </>\n  );\n};\n\nexport default EmptyScreen;","import React from 'react';\nimport Item from './item';\nimport EmptyScreen from './EmptyScreen';\n\nconst ToDo = (props) => {\n    let { data } = props;\n\n    const onUpdateItem = (id) => {\n        props.callGrandpa(id);\n      };\n\n\n    let toDoList = data.map((el) => {\n        return <Item key={el._id} info={el} callYourParent={onUpdateItem}></Item>;\n    });\n\n    return (\n        <div className=\"todo\">\n            <h4>To Do</h4>\n            {data.length > 0 ? toDoList : <EmptyScreen></EmptyScreen>}\n        </div>\n    );\n};\n\nexport default ToDo;\n","import React from 'react';\nimport Item from './item';\nimport EmptyScreen from './EmptyScreen';\n\n\nconst Done = (props) => {\n    let { data } = props;\n\n    const onUpdateItem = (id) => {\n      props.callGrandma(id);\n    };\n\n  let donesList = data.map((el) => {\n    return <Item key={el._id} info={el} callYourParent={onUpdateItem}></Item>;\n    \n  });\n    return (\n        <div className=\"done\">\n            <h4>Done</h4>\n            {data.length > 0 ? donesList : <EmptyScreen></EmptyScreen>}        \n        </div>\n    );\n};\n\nexport default Done;\n","import React from 'react';\n\nconst Notification = (props) => {\n  setTimeout(() => {\n    props.hideNotification();\n  }, 4000);\n\n  return (\n    <>\n      <div className=\"notification\">\n        <img src=\"https://media.giphy.com/media/XreQmk7ETCak0/giphy.gif\" alt=\"\"></img>\n        <p>Todos were updated!</p>\n      </div>\n    </>\n  );\n};\n\nexport default Notification;","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass ToDoForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { todo: '' };\n    }\n    \n\n    handleSubmit = (e) => {\n        e.preventDefault();\n    \n        // Create a new todo\n        let newTodo = {\n          status: false,\n          _id: uuidv4(),\n          text: this.state.todo,\n          date: new Date(),\n        };\n    \n        // Clean up the form\n\n\n        // Pass the new todo to the parent\n        this.props.addTodo(newTodo);\n      };\n\n      handleChange = (e) => {\n        this.setState({ todo: e.target.value });\n  };\n    render() {\n\n\n\n        return(\n            <form onSubmit={this.handleSubmit} >\n                <input placeholder=\"write something\" onChange={this.handleChange}></input>\n                <button>ADD</button>\n            </form>\n        )\n    }\n    \n}\n\nexport default ToDoForm","import React from 'react';\nimport '../scss/App.scss';\nimport Navigation from './navigation';\nimport ToDo from './todo';\nimport Done from './done';\nimport Notification from './Notification';\nimport ToDoForm from './FormTodo';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items:[\n        // {\n        //   status: false,\n        //   _id: '5e4e852c9b28370008805bc8',\n        //   text: 'Buy cheese',\n        //   date: '2020-02-20T13:10:04.229Z',\n        // },\n        // {\n        //   status: false,\n        //   _id: '5e4e88515ad2770007b1b36b',\n        //   text: 'Order a taxi',\n        //   date: '2020-02-20T13:23:29.432Z',\n        // },\n        // {\n        //   status: false,\n        //   _id: '5e4e88525ad2770007b1b36c',\n        //   text: \"Trim my eyebrows\",\n        //   date: '2020-02-20T13:23:30.580Z',\n        // },\n        // {\n        //   status: true,\n        //   _id: '5eae8b6114063e000752e5c0',\n        //   text: 'Get a LinkedIn friend',\n        //   date: '2020-05-03T09:14:09.575Z',\n        // },\n        // {\n        //   status: true,\n        //   _id: '5eae8b6214063e000752e5c1',\n        //   text: 'Vacuum my windows',\n        //   date: '2020-05-03T09:14:10.881Z',\n        // },\n        // {\n        //   status: true,\n        //   _id: '5eae8b6614063e000752e5c2',\n        //   text: 'Prepare my workout session',\n        //   date: '2020-05-03T09:14:14.142Z',\n        // },\n    ],\n      showNotification: false,\n    };\n  }\n\n  updateTodos = (id) => {\n    let item;\n\n    // Toggle the status of the todo and also keep it when you find it\n    const newItems = this.state.items.map((el) => {\n      if (el._id === id) {\n        el.status = !el.status;\n        item = el;\n      }\n      return el;\n    });\n\n\n    // update ToDo Item in API using the PUT method \n    fetch(`https://ds-todo-api.now.sh/todos/${item._id}`, {\n      method: \"PUT\",\n      // tell the API what kind of data we send to it\n      headers: { \"Content-Type\": \"application/json\"},\n      // send data we want to update => as object \n      body: JSON.stringify( { \n        status: item.status,\n      } )\n    })\n    .then(res => res.json())\n    .then(todoUpdated => {\n      console.log(todoUpdated)\n\n      this.setState({\n        items: newItems,\n        // notifications: allNotifications,\n      });\n    })\n\n  };\n\n\n  componentDidMount() {\n\n    fetch(\"https://ds-todo-api.now.sh/todos\")\n    .then(res => res.json())\n    .then(todoData => {\n      console.log(todoData)\n      this.setState({items: todoData})\n    })\n\n  }\n\n    updateFam = (id) => {\n      const newItems = this.state.items.map((el) => {\n        if (el._id === id) el.status = !el.status;\n        return el;\n      });\n  \n      this.setState({\n        items: newItems,\n        showNotification: true,\n      });\n    };\n\n\n    handleNotification = () => {\n        this.setState({\n          showNotification: false,\n        });\n    };\n\n    handleNewTodo = (todo) => {\n\n      let API_URL = process.env.REACT_APP_URL;\n      fetch(API_URL) \n      .then(res => res.json())\n      .then(newTodo => {\n        let newItems = [...this.state.items, newTodo];\n        this.setState({items: newItems})\n      })\n      .catch(error => {\n        console.log(error)\n      })\n      \n    };\n\n  render() {\n    let items = this.state.items;\n    let toDos = items.filter((el) => el.status === false);\n    let dones = items.filter((el) => el.status === true);\n    let showNotification = this.state.showNotification;\n\n\nreturn (\n  <div className=\"App\">\n    <Navigation></Navigation>\n    {showNotification && <Notification hideNotification={this.handleNotification}></Notification>}\n    <ToDoForm addTodo={this.handleNewTodo}></ToDoForm>\n    <ToDo data={toDos} callGrandpa={this.updateFam}></ToDo>\n    <Done data={dones} callGrandma={this.updateFam}></Done>\n  </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}